import java.util.Scanner;

public class Main {
    int N;
    int[][] board;

    public Main(int n) {
        N = n;
        board = new int[N][N];
    }

    /* A utility function to print the solution */
    void printSolution() {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++)
                System.out.print(" " + board[i][j] + " ");
            System.out.println();
        }
    }

    /* A utility function to check if a queen can
    be placed on board[row][col]. Note that this
    function is called when "col" queens are already
    placed in columns from 0 to col -1. So we need
    to check only the left side for attacking queens */
    boolean isSafe(int row, int col) {
        int i, j;

        /* Check this row on the left side */
        for (i = 0; i < col; i++)
            if (board[row][i] == 1)
                return false;

        /* Check upper diagonal on the left side */
        for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
            if (board[i][j] == 1)
                return false;

        /* Check lower diagonal on the left side */
        for (i = row, j = col; j >= 0 && i < N; i++, j--)
            if (board[i][j] == 1)
                return false;

        return true;
    }

    /* A recursive utility function to solve the N
    Queen problem */
    boolean solveNQUtil(int col) {
        /* base case: If all queens are placed
        then return true */
        if (col >= N)
            return true;

        /* Consider this column and try placing
        the queen in all rows one by one */
        for (int i = 0; i < N; i++) {
            /* Check if the queen can be placed on
            board[i][col] */
            if (isSafe(i, col)) {
                /* Place this queen in board[i][col] */
                board[i][col] = 1;

                /* recur to place the rest of the queens */
                if (solveNQUtil(col + 1))
                    return true;

                /* If placing the queen in board[i][col]
                doesn't lead to a solution, then
                remove the queen from board[i][col] */
                board[i][col] = 0; // BACKTRACK
            }
        }

        /* If the queen cannot be placed in any row in
        this column col, then return false */
        return false;
    }

    /* This function solves the N Queen problem using
    Backtracking. It takes the initial placement of
    the first queen and then uses solveNQUtil() to
    solve the problem. It returns false if queens
    cannot be placed, otherwise, returns true and
    prints the placement of queens in the form of 1s.
    Please note that there may be more than one
    solution; this function prints one of the
    feasible solutions. */
    boolean solveNQWithInitialPlacement(int initialRow, int initialCol) {
        // Place the first queen at the specified row and column
        board[initialRow][initialCol] = 1;

        // Use backtracking to place the remaining queens
        return solveNQUtil(initialCol + 1);
    }

    // Driver program to test the above function
    public static void main(String args[]) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the value of N: ");
        int N = scanner.nextInt();

        System.out.print("Enter the row to place the first queen (0 to N-1): ");
        int initialRow = scanner.nextInt();

        System.out.print("Enter the column to place the first queen (0 to N-1): ");
        int initialCol = scanner.nextInt();

        if (initialRow < 0 || initialRow >= N || initialCol < 0 || initialCol >= N) {
            System.out.println("Invalid initial position. Exiting.");
            return;
        }

        Main queenSolver = new Main(N);
        if (!queenSolver.solveNQWithInitialPlacement(initialRow, initialCol)) {
            System.out.print("Solution does not exist");
        } else {
            queenSolver.printSolution();
        }

        scanner.close();
    }
}
  
